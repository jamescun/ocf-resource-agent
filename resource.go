package ocf

// interface for management of a resource by Pacemaker
type Resource interface {
	// start operation is responsible for starting the service associated with a resource
	// and waiting until it has come up successfully, returning nil when complete.
	// if the resource is stateful, the service MUST be start configured as a slave and
	// will potentially be promoted to a master.
	Start(*Context) error

	// stop operation is responsible for stopping the service gracefully and waiting until
	// it has completely stopped, returning nil when complete.
	Stop(*Context) error

	// monitor operation is invoked at a configured interval (usually several times a minute)
	// to perform health checks on the service, returning nil if healthy.
	// if the service is a healthy master, it must return ErrRunningMaster instead of nil.
	Monitor(*Context) error

	// notify operation is invoked on any state change registered for the resource.
	// it has an additional Context field 'Notify' which is the composite of the
	// notify type and operation (i.e. 'pre-promote').
	Notify(*Context) error

	// promote will be invoked once to promote a slave to a master and waiting until the
	// promotion is successful. Pacemaker will assume that the service is in the slave state.
	Promote(*Context) error

	// demote will be invoked once to demote a master to a slave and waiting until the
	// demotion is successful. It must re-establish data syncing if required.
	// This is usually as a result of operator action to migrate resources for maintenance.
	Demote(*Context) error

	// metadata must print data about the resource agent, relating to its supported
	// statefulness and parameters.
	// NOTE: This will be automatically generated by a future version of ocf-resource-agent
	Metadata() error
}
